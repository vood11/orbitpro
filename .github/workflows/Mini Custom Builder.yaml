#
# Copyright (c) 2023 LENAR
# Copyright (c) 2025 DBAI
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
name: Mini Custom Builder

permissions:
  contents: write
  packages: write

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source:
        description: "Source Branch"
        type: string
        required: true
        default: "https://github.com/vood11/openwrt"
      branch:
        description: "Source Branch"
        type: choice
        options:
          - openwrt-22.03
          - openwrt-23.05
          - openwrt-24.10
      config_file:
        description: "Config Name"
        type: choice
        options:
          - openwrt.config
          - openwrt.config-openclash
          - openwrt.config-passwall
      config_link:
        description: "Use Config URL"
        type: boolean
        default: false
      config_url:
        description: "Config URL"
        type: string
        required: false
        default: ""
      diy:
        description: "DIY Script"
        type: choice
        options:
          - diy_v1.sh
          - diy_v2.sh
      firmware_release:
        description: "Firmware Release"
        type: boolean
        default: true
      vermagic:
        description: "Replace Vermagic"
        type: boolean
        default: true
      vermagic_opt:
        description: "SNAPSHOT Vermagic (uncheck for stable)"
        type: boolean
        default: false

env:
  SOURCE_URL: ${{ github.event.inputs.source }}
  SOURCE_ORIGIN: https://github.com/openwrt/openwrt
  SOURCE_BRANCH: ${{ github.event.inputs.branch }}
  FEEDS_SH: feeds.sh
  FEEDS_PKG_SH: feeds_pkg.sh
  CONFIG_FILE: ${{ github.event.inputs.config_file }}
  CONFIG_LINK: ${{ github.event.inputs.config_link }}
  CONFIG_URL: ${{ github.event.inputs.config_url }}
  DIY_SH: ${{ github.event.inputs.diy }}
  FIRMWARE_RELEASE: ${{ github.event.inputs.firmware_release }}
  TOOLCHAIN_TAG: toolchain
  VERMAGIC: ${{ github.event.inputs.vermagic }}
  VERMAGIC_OPT: ${{ github.event.inputs.vermagic_opt }}
  TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TZ: UTC
  MAX_RETRIES: 3
  RETRY_DELAY: 30

jobs:
  Build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Initialize Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          mkdir -p workspace
          df -hT
          ulimit -n 8192
          sudo sysctl vm.swappiness=10

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: '4096'
          temp-reserve-mb: '2048'
          swap-size-mb: '2048'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout repository files
        uses: actions/checkout@v4

      - name: Cache Apt Packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('**/workflow.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y \
            ack antlr3 aria2 autoconf automake autopoint binutils bison \
            btrfs-progs build-essential bzip2 ca-certificates ccache cmake coreutils \
            cpio curl device-tree-compiler fastjar flex g++-multilib gawk gcc-multilib \
            gettext git git-core gperf gzip haveged intltool jq libc6-dev-i386 \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
            libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool libz-dev lrzsz mkisofs msmtp nano ninja-build p7zip \
            p7zip-full patch pigz pkgconf python3 python3-pip python3-pyelftools \
            python3-setuptools qemu-utils rsync scons squashfs-tools swig tar \
            uglifyjs unzip upx upx-ucl vim wget xxd xz-utils yasm zip \
            zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          df -hT
      
      - name: Set Custom Build Information
        run: |
          echo "Setting custom build information..."
          echo "KBUILD_BUILD_USER=dbai" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=tim-mawar" >> $GITHUB_ENV
          echo "SOURCE_DATE_EPOCH=$(date -d '1998-05-04' +%s)" >> $GITHUB_ENV
          echo "Build user set to: dbai"
          echo "Build host set to: tim-mawar"
          echo "Build date set to: 4 Mei 1998"

      - name: Prepare .config for Variable Generation
        run: |
          if [[ "${{ env.CONFIG_LINK }}" == "true" && -n "${{ env.CONFIG_URL }}" ]]; then
            curl -fsSL ${{ env.CONFIG_URL }} -o .config
          else
            cp ./config/${{ env.CONFIG_FILE }} .config
          fi

      - name: Generate Variables
        id: env
        run: |
          export SOURCE_OWNER=$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          export SOURCE_REPO=$(echo $SOURCE_URL | awk -F '/' '{print $NF}' | sed 's/\.git$//')
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          
          export DEVICE_NAME=$(grep 'CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          export DEVICE_PLATFORM=$(grep 'CONFIG_TARGET_ARCH_PACKAGES' .config | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          export DEVICE_TARGET=$(grep 'CONFIG_TARGET_BOARD' .config | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          export DEVICE_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET' .config | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          
          export BUILD_DATE=$(date +"%Y-%m-%d-%H%M")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Generate Release Suffix
        id: suffix
        run: |
          case "${{ env.CONFIG_FILE }}" in
            *openclash)
              echo "suffix=_openclash" >> $GITHUB_ENV
              ;;
            *passwall)
              echo "suffix=_passwall" >> $GITHUB_ENV
              ;;
            *)
              echo "suffix=" >> $GITHUB_ENV
              ;;
          esac

      - name: Download Toolchain Image From Release
        uses: robinraju/release-downloader@v1.12
        with:
          token: ${{ env.TOKEN }}
          repository: ${{ github.repository }}
          fileName: ${{ env.TOOLCHAIN_IMAGE }}.img.*
          tag: ${{ env.TOOLCHAIN_TAG }}
          out-file-path: workspace

      - name: Prepare Toolchain Image
        run: |
          cd workspace
          for i in {00..09}; do
            if [ -f "$TOOLCHAIN_IMAGE.img.$i" ]; then
              cat $TOOLCHAIN_IMAGE.img.$i >> $TOOLCHAIN_IMAGE.img
              rm -f $TOOLCHAIN_IMAGE.img.$i
            fi
          done
          mkdir -p openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          echo "OPENWRT_ROOT_PATH=$PWD/openwrt" >> $GITHUB_ENV

      - name: Update Source Code
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote add upstream ${{ env.SOURCE_ORIGIN }}
          git fetch upstream ${{ env.SOURCE_BRANCH }}
          git merge upstream/${{ env.SOURCE_BRANCH }}

      - name: Load Custom Feeds
        run: |
          cp $GITHUB_WORKSPACE/scripts/${{ env.FEEDS_SH }} ${{ env.OPENWRT_ROOT_PATH }}/
          cd ${{ env.OPENWRT_ROOT_PATH }}
          chmod +x ./${{ env.FEEDS_SH }} && ./${{ env.FEEDS_SH }}

      - name: Install Feeds
        run: |
          cp $GITHUB_WORKSPACE/scripts/${{ env.FEEDS_PKG_SH }} ${{ env.OPENWRT_ROOT_PATH }}/
          cd ${{ env.OPENWRT_ROOT_PATH }}
          ./scripts/feeds clean
          ./scripts/feeds update -a
          chmod +x ./${{ env.FEEDS_PKG_SH }} && ./${{ env.FEEDS_PKG_SH }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          cp $GITHUB_WORKSPACE/.config ${{ env.OPENWRT_ROOT_PATH }}/.config
          cd ${{ env.OPENWRT_ROOT_PATH }}
          make defconfig
          mkdir -p bin
          cp .config ./bin/build.config
          
      - name: Replace Vermagic
        if: ${{ env.VERMAGIC == 'true' }}
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}
          snapshot_version="${SOURCE_BRANCH#openwrt-}"
          release_version=$(curl -s https://api.github.com/repos/openwrt/openwrt/tags \
            | grep -m1 -oE "\"name\":\s*\"v${snapshot_version}\.[^\"]+\"" \
            | cut -d'"' -f4 | sed 's/^v//')
          if [[ "${{ env.VERMAGIC_OPT }}" == "true" ]]; then
            version="${snapshot_version}-SNAPSHOT"
          else
            version="${release_version}"
          fi
          kmods=$(curl -s https://downloads.openwrt.org/releases/${version}/targets/${DEVICE_TARGET}/${DEVICE_SUBTARGET}/kmods/ \
            | grep -oP '<td class="n"><a href="\K[^/]+|<td class="d">\K[^<]+' \
            | paste -d '|' - - | sort -t '|' -k2 | head -n1 | cut -d '|' -f1)
          
          echo "src/gz openwrt_kmods https://downloads.openwrt.org/releases/${version}/targets/${DEVICE_TARGET}/${DEVICE_SUBTARGET}/kmods/${kmods}" >> $GITHUB_WORKSPACE/custom/files/etc/opkg/customfeeds.conf
          
          grep -q '^CONFIG_VERSION_REPO=' ./.config \
            && sed -i "s|^CONFIG_VERSION_REPO=.*|CONFIG_VERSION_REPO=\"https://downloads.openwrt.org/releases/${version}\"|" ./.config \
            || echo -e "\nCONFIG_VERSION_REPO=\"https://downloads.openwrt.org/releases/${version}\"" >> ./.config
          echo "$kmods" | sed 's/.*-//' > .vermagic
          sed -i -e 's/^\(.\).*vermagic$/\1cp $(TOPDIR)\/.vermagic $(LINUX_DIR)\/.vermagic/' ./include/kernel-defaults.mk

      - name: Upload Config To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-Config
          path: ${{ env.OPENWRT_ROOT_PATH }}/bin/build.config
          retention-days: 7

      - name: Load DIY
        run: |
          cp $GITHUB_WORKSPACE/scripts/${{ env.DIY_SH }} ${{ env.OPENWRT_ROOT_PATH }}/
          mv $GITHUB_WORKSPACE/custom ${{ env.OPENWRT_ROOT_PATH }}/
          cd ${{ env.OPENWRT_ROOT_PATH }}
          chmod +x ./${{ env.DIY_SH }} && ./${{ env.DIY_SH }}

      - name: Download Packages
        timeout-minutes: 30
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}
          retry_count=0
          until make download -j10 || [ $retry_count -ge $MAX_RETRIES ]; do
            retry_count=$((retry_count+1))
            echo "Download failed, retrying in $RETRY_DELAY seconds... ($retry_count/$MAX_RETRIES)"
            sleep $RETRY_DELAY
          done
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Packages
        timeout-minutes: 180
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}
          echo -e "$(nproc) Thread Compile"
          make clean
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(($(nproc) + 1)) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(($(nproc) + 1)) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate Firmware
        timeout-minutes: 60
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}
          make package/install -j$(($(nproc) + 1)) || make package/install -j1 V=s
          make target/install -j$(($(nproc) + 1)) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: Upload Bin To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.DEVICE_NAME }}-${{ env.BUILD_DATE }}
          path: ${{ env.OPENWRT_ROOT_PATH }}/bin
          retention-days: 7

      - name: Organize Files
        if: ${{ env.FIRMWARE_RELEASE == 'true' }}
        run: |
          cd ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}
          rm -rf packages feeds.buildinfo profiles.json version.buildinfo
          df -hT $PWD

      - name: Deploy Files To Release
        if: ${{ env.FIRMWARE_RELEASE == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.TOKEN }}
          name: ${{ env.SOURCE_REPO }}_${{ env.SOURCE_BRANCH }}_${{ env.DEVICE_NAME }}${{ env.suffix }}
          commit: ${{ github.sha }}
          tag: ${{ env.SOURCE_REPO }}_${{ env.SOURCE_BRANCH }}_${{ env.DEVICE_NAME }}${{ env.suffix }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
          replacesArtifacts: true
          allowUpdates: true
          prerelease: false
          body: |
            ### Build Information
            ---
            - Source Code: ${{ env.SOURCE_URL }}
            - Source Code Branch: ${{ env.SOURCE_BRANCH }}
            - Device Target: ${{ env.DEVICE_TARGET }}
            - Device Subtarget: ${{ env.DEVICE_SUBTARGET }}
            - Device Platform: ${{ env.DEVICE_PLATFORM }}
            - Device Name: ${{ env.DEVICE_NAME }}
            - Build Date: ${{ env.BUILD_DATE }}
